editFile = (arr) => {
    console.log(arr);

    // Remove element if it's exist
    let isModalExist = document.getElementById('edit-file');
    if (isModalExist != undefined)
        isModalExist.remove();    

    // Function to flexible add inline styles
    function setStyle(object, propertyObject) {
        for (let property in propertyObject)
            object.style[property] = propertyObject[property];
    }

    // Create modal window
    let modalWindow = document.createElement('div');
    modalWindow.setAttribute('id', 'edit-file');

    // Create form and elements for it
    let form = document.createElement('form');
    form.method = 'POST';
    form.action = `/profile/edit/file/${arr._id}`;
    form.classList.add('edit-file__form');

    // Properties for item name w/ label for it
    let itemName = document.createElement('input');
    itemName.value = arr.name || '';
    itemName.name = 'name';
    itemName.placeholder = 'Укажите имя файла';
    itemName.classList.add('edit-file__input');
    // Text for item name w/ label for it
    let textName = document.createElement('p');
    textName.innerHTML = 'Имя файла:';
    textName.classList.add('edit-file__text');
    // Label
    let labelName = document.createElement('label');
    labelName.appendChild(textName);
    labelName.appendChild(itemName);
    form.appendChild(labelName);

    // Properties for item kind w/ label for it
    let itemKind = document.createElement('select');
    let optionsItemKind = ['Грамота', 'Благодарственное письмо', 'Сертификат'];
    optionsItemKind.forEach(function(element, key) {
        if (element === arr.kind){
            itemKind[key] = new Option(element, key, true);
        }
        itemKind[key] = new Option(element, key);
    });
    itemKind.name = 'kind';
    itemKind.classList.add('edit-file__select');
    // Text for item kind w/ label for it
    let textKind = document.createElement('p');
    textKind.innerHTML = 'Тип награды:';
    textKind.classList.add('edit-file__text');
    // Label
    let labelKind = document.createElement('label');
    labelKind.appendChild(textKind);
    labelKind.appendChild(itemKind);
    form.appendChild(labelKind);

    // Properties for item mark w/ label for it
    let itemMark = document.createElement('input');
    itemMark.value = arr.mark || '';
    itemMark.placeholder = 'Оценка';
    itemMark.classList.add('edit-file__input');
    itemMark.name = 'mark';
    // Text for item mark w/ label for it
    let textMark = document.createElement('p');
    textMark.innerHTML = 'Оценка:';
    textMark.classList.add('edit-file__text');
    // Label
    let labelMark = document.createElement('label');
    labelMark.appendChild(textMark);
    labelMark.appendChild(itemMark);
    form.appendChild(labelMark);

    // Properties for item subject w/ label for it
    let itemSubject = document.createElement('input');
    itemSubject.value = arr.subject || '';
    itemSubject.placeholder = 'Укажите тему выступления';
    itemSubject.classList.add('edit-file__input');
    itemSubject.name = 'subject';
    // Text for item subject w/ label for it
    let textSubject = document.createElement('p');
    textSubject.innerHTML = 'Тема выступления:';
    textSubject.classList.add('edit-file__text');
    // Label
    let labelSubject = document.createElement('label');
    labelSubject.appendChild(textSubject);
    labelSubject.appendChild(itemSubject);
    form.appendChild(labelSubject);

    // Properties for item place w/ label for it
    let itemPlace = document.createElement('input');
    itemPlace.value = arr.place || '';
    itemPlace.placeholder = 'Укажите место, где проходило мероприятие';
    itemPlace.classList.add('edit-file__input');
    itemPlace.name = 'place';
    // Text for item subject w/ label for it
    let textPlace = document.createElement('p');
    textPlace.innerHTML = 'Место мероприятия:';
    textPlace.classList.add('edit-file__text');
    // Label
    let labelPlace = document.createElement('label');
    labelPlace.appendChild(textPlace);
    labelPlace.appendChild(itemPlace);
    form.appendChild(labelPlace);

    // Properties for item date w/ label for it
    let itemDate = document.createElement('input');
    itemDate.value = arr.date || '';
    itemDate.placeholder = 'Укажите дату участия в мероприятии';
    itemDate.classList.add('edit-file__input');
    itemDate.name = 'date';
    // Text for item subject w/ label for it
    let textDate = document.createElement('p');
    textDate.innerHTML = 'Дата участия:';
    textDate.classList.add('edit-file__text');
    // Label
    let labelDate = document.createElement('label');
    labelDate.appendChild(textDate);
    labelDate.appendChild(itemDate);
    form.appendChild(labelDate);

    // Properties for submit button w/ label for it
    let submitModal = document.createElement('button');
    submitModal.classList.add('edit-file__submit');
    submitModal.innerHTML = 'Сохранить';
    submitModal.value = 'submit';
    submitModal.onclick = function() {
        this.form.submit();
    }
    form.appendChild(submitModal);

    // Close modal window element
    let closeSpan = document.createElement('span');
    closeSpan.innerHTML = '&times;';
    closeSpan.classList.add('edit-file__close');
    // Close modal window and return back URL
    closeSpan.onclick = function() {
        modalWindow.remove();
        window.history.replaceState("", document.title, window.location.pathname);
    };

    // Close modal window when user clicks outside the modal workspace
    window.onclick = event => {
        if (event.target == modalWindow) {
            modalWindow.remove();
            window.history.replaceState("", document.title, window.location.pathname);
        }
    }

    // Properties for modal window wrapper
    let modalWindowWrapper = document.createElement('div');
    modalWindowWrapper.classList.add('edit-file__wrapper');
    modalWindowWrapper.appendChild(closeSpan);
    modalWindowWrapper.appendChild(form);
    // Add wrapper to the modal window
    modalWindow.appendChild(modalWindowWrapper);

    // Add modal window to the table
    document.getElementById('files').appendChild(modalWindow);

}
const modalHandler = (actionId) => {

    let modalWindow = document.getElementById('modal');
    let actionContent = document.getElementsByClassName('actions__content');
    let closeModal = document.getElementsByClassName("modal__close")[0];
    let linkModal = document.getElementsByClassName("actions__link");

    // Close the modal window when button (span) is pressed
    closeModal.onclick = () => {
        document.getElementById(actionId).style.display = "none";
        modalWindow.style.display = "none";
        window.history.replaceState("", document.title, window.location.pathname);
        // Prevents the loses of scroll position when modal is open and the body set to be fixed
        const scrollY = document.body.style.top;
        document.body.style.position = '';
        document.body.style.top = '';
        window.scrollTo(0, parseInt(scrollY || '0') * -1);
    }

    // Close the modal window when user clicks outside the modal window
    window.onclick = event => {
        if (event.target == modalWindow) {
            document.getElementById(actionId).style.display = "none";
            modalWindow.style.display = "none";
            window.history.replaceState("", document.title, window.location.pathname);
            // Prevents the loses of scroll position when modal is open and the body set to be fixed
            const scrollY = document.body.style.top;
            document.body.style.position = '';
            document.body.style.top = '';
            window.scrollTo(0, parseInt(scrollY || '0') * -1);
        }
    }

    // Disable all modal content tabs
    for (let item of actionContent){
        item.style.display = "none";
    }

    // Show the modal window
    modalWindow.style.display = "flex";
    modalWindow.style.flexDirection = "column";
    document.body.style.position = 'fixed';
    document.body.style.top = `${window.scrollY}px`;

    // Display content for modal window
    switch(actionId) {
        case "login":
            document.getElementById(actionId).style.display = "flex";
            document.getElementById(actionId).style.flexDirection = "column";
            linkModal.item(0).classList.add("actions__link-active");
            if (linkModal.item(1).classList.contains("actions__link-active"))
                linkModal.item(1).classList.remove("actions__link-active");
            break;
        case "register":
            document.getElementById(actionId).style.display = "flex";
            document.getElementById(actionId).style.flexDirection = "column";
            linkModal.item(1).classList.add("actions__link-active");
            if (linkModal.item(0).classList.contains("actions__link-active"))
                linkModal.item(0).classList.remove("actions__link-active");
            break;
    }
}
window.onload = function() {
    document.getElementById('avatar-upload').onchange = () => {
        this.form.submit();
    }
}
window.onload = () => {
    let filter = () => {
        // Search input for each field (mark. subject, place, date)
        console.log('filter is activated');
        let searchKind = document.getElementById('search-kind');
        if (searchKind === null) return;
        let searchMark = document.getElementById('search-mark');
        let searchSubject = document.getElementById('search-subject');
        let searchPlace = document.getElementById('search-place');
        let searchDate = document.getElementById('search-date');

        // All items with data-item attribute
        let dataItems = document.querySelectorAll('[data-item]');

        // Array for storing elements in the order (1st elem =  all elements with [data-item = '1'] etc...)
        let itemsArray = [];
        // Assign each element to array
        dataItems.forEach(item => {
            let attr = item.getAttribute('data-item');
            if (itemsArray[attr] == undefined)
                itemsArray[attr] = [];
            itemsArray[attr].push(item);
        });

        // Add event 'keyup' for search kind
        searchKind.addEventListener('keyup', function() {
            console.log('key is pressed');
            let itemParam = searchKind.value.toLowerCase();
            searchHandler('.item-file-kind', itemsArray, itemParam);
        })

        // Add event 'keyup' for search mark
        searchMark.addEventListener('keyup', function() {
            console.log('key is pressed');
            let itemParam = searchMark.value.toLowerCase();
            searchHandler('.item-file-mark', itemsArray, itemParam);
        });

        // Add event 'keyup' for search subject
        searchSubject.addEventListener('keyup', function() {
            console.log('key is pressed');
            let itemParam = searchSubject.value.toLowerCase();
            searchHandler('.item-file-subject', itemsArray, itemParam);
        });

        // Add event 'keyup' for search place
        searchPlace.addEventListener('keyup', function() {
            console.log('key is pressed');
            let itemParam = searchPlace.value.toLowerCase();
            searchHandler('.item-file-place', itemsArray, itemParam);
        });

        // Add event 'keyup' for search date
        searchDate.addEventListener('keyup', function() {
            console.log('key is pressed');
            let itemParam = searchDate.value.toLowerCase();
            searchHandler('.item-file-date', itemsArray, itemParam);
        });
    };

    filter();

    // Function to handle search
    let searchHandler = (itemClass, itemsArray, key) => {

        // Create new array with the same elements from different data-item
        let sortItems = itemsArray.map(el => {
            let newItem;
            for (const elem of el) {
                if(elem.matches(itemClass))
                    newItem = elem;
            }
            return newItem;
        });
        
        // Check if input value is equivalent to one of the elements
        sortItems.forEach(elem => {
            // Take value of element (remember, we have span inside main div,
            // that's why we use children[0])
            let childItem = elem.children[0].innerHTML;
            if(childItem.toLowerCase().indexOf(key) > -1) {
                let itemData = elem.getAttribute('data-item');
                itemsArray[itemData].forEach(el => {
                    el.style.display = '';
                });
            } else {
                let itemData = elem.getAttribute('data-item');
                itemsArray[itemData].forEach(el => {
                    el.style.display = 'none';
                });
            }
        });

    };

}
let changeSlide = n => {
    let slides = document.querySelectorAll('.slider__item');
    let buttons = document.getElementsByClassName('slider__button');

    let nextSlide = (n) => {
        console.log('slides: ', slides);
        console.log('slides length: ', slides.length);
        let activeItem = 0;
        slides.forEach(el => {
            console.log('element: ', el);
            if (el.classList.contains('slider__item--isVisible')){
                activeItem = el.getAttribute('data-image');
                el.classList.toggle('slider__item--isVisible');
            }
        });
        if (slides.item(activeItem+n)) {
            slides.item(activeItem+n).classList.toggle('slider__item--isVisible');
            console.log('next item');
        }
        
        
    }
    nextSlide(n);
}